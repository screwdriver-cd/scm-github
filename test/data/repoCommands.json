{
    "name": "sd-checkout-code",
    "command": "export SD_GIT_WRAPPER=\"$(if [ `uname` = 'Darwin' ]; then echo 'eval'; else echo 'sd-step exec core/git'; fi)\" && echo Exporting environment variables && if [ ! -z $SCM_CLONE_TYPE ] && [ $SCM_CLONE_TYPE = ssh ]; then export SCM_URL=git@github.com:screwdriver-cd/guide; elif [ ! -z $SCM_USERNAME ] && [ ! -z $SCM_ACCESS_TOKEN ]; then export SCM_URL=https://$SCM_USERNAME:$SCM_ACCESS_TOKEN@github.com/screwdriver-cd/guide; else export SCM_URL=https://github.com/screwdriver-cd/guide; fi && export GIT_URL=$SCM_URL.git && export GIT_MERGE_AUTOEDIT=no && echo Setting user name and user email && $SD_GIT_WRAPPER \"git config --global user.name sd-buildbot\" && $SD_GIT_WRAPPER \"git config --global user.email dev-null@screwdriver.cd\" && export SD_CHECKOUT_DIR_FINAL=$SD_SOURCE_DIR && if [ ! -z $SD_CHECKOUT_DIR ]; then export SD_CHECKOUT_DIR_FINAL=$SD_CHECKOUT_DIR; fi && echo Checking out code using the repo manifest defined in git@github.com:org/repo.git/default.xml && $(if curl --version > /dev/null 2>&1; then echo 'eval'; else echo 'sd-step exec core/curl'; fi) \"curl -s https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo\" && chmod a+x /usr/local/bin/repo && $(if wget --version > /dev/null 2>&1; then echo 'eval'; else echo 'sd-step exec core/wget'; fi) \"wget -q -O - https://github.com/screwdriver-cd/sd-repo/releases/latest > sd-repo-releases.html\" && $(if grep --version > /dev/null 2>&1; then echo 'eval'; else echo 'sd-step exec core/grep'; fi) \"grep -E -o /screwdriver-cd/sd-repo/releases/download/v[0-9.]*/sd-repo_linux_amd64 sd-repo-releases.html > sd-repo-latest\" && $(if wget --version > /dev/null 2>&1; then echo 'eval'; else echo 'sd-step exec core/wget'; fi) \"wget --base=http://github.com/ -q -i sd-repo-latest -O /usr/local/bin/sd-repo\" && chmod a+x /usr/local/bin/sd-repo && sd-repo -manifestUrl=git@github.com:org/repo.git/default.xml -sourceRepo=screwdriver-cd/guide && if [ $(cat sourcePath) != \".\" ]; then export SD_SOURCE_DIR=$SD_SOURCE_DIR/$(cat sourcePath); fi && cd $SD_SOURCE_DIR && export GIT_BRANCH=origin/branchName"
}
